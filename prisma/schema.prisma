// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  avatar    String
  note      Note[]
  task      Task[]
  ower      OwerOwee[] @relation("Ower")
  owee      OwerOwee[] @relation("Owee")
  createdAt DateTime @default(now())
}

//notes are the main entity in the app, they can be linked to each other

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  tags      Tag[]    @relation("NoteTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  // Self-referencing relationship for graph structure
  linkedNoteId String?
  linkedNote   Note?   @relation("LinkedNote", fields: [linkedNoteId], references: [id], onDelete: SetNull)
  linkedFrom   Note[]  @relation("LinkedNote")
  task         Task[]  @relation("NoteTask")
}

//tags to categorize notes and tasks
model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]   @relation("NoteTag")
  tasks     Task[]   @relation("TaskTag")
}

enum priority {
  low
  normal
  high
}

enum recurrence {
  days
  weeks
  months
  years
}

enum status {
  pending
  completed
}

//tasks (can be linked to notes)
model Task {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  status      status  @default(pending)

  dueDate            DateTime?
  priority           priority    @default(normal)
  recurrencePattern  recurrence?
  recurrenceInterval Int?
  tags               Tag[]       @relation("TaskTag")
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  notes              Note[]      @relation("NoteTask")

  userId String
  user   User   @relation(fields: [userId], references: [id])
}


enum currency{
  USD
  INR
}


//money management
model OwerOwee{
  id String @id @default(uuid())
  amount Int
  currency currency @default(INR)
  description String
  owerId String
  ower User @relation("Ower", fields: [owerId], references: [id])
  oweeId String
  owee User @relation("Owee", fields: [oweeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status status @default(pending) 
}